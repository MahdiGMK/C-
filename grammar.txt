Sigma
Space
Tab
Newline

INITIAL == Expr

Sign == + | -
Dig == 0 | ... | 9
Let == _ | a | ... | z | A | ... | Z
Spc == Space | Tab | Newline

Ident == Let (Let | Dig)*
TypeIdent == Ident
NameIdent == Ident

CharVal == '\'' (any char except ' or \ | escape) '\''
StrVal == '"' (any char except " or \ | escape)* '"'
escape == '\\' ["nt\"'\\]

IntVal == Sign*Dig+
FloatVal == Sign*Dig+ | Sign*Dig+ . Dig+
BoolVal == true | false

StructVal == TypeIdent { } | TypeIdent { (NameIdent = Expr ,)* NameIdent = Expr }
ArrayVal == []TypeIdent { (Expr ,)* Expr | }

Value == FuncVal | void | CharVal | StrVal | IntVal | BoolVal | StructVal | ArrayVal

Operator0 == ||
Operator1 == &&
Operator2 == <= | >= | < | > | == | !=
Operator3 == | | & | ~ | ^ | !
Operator4 == * | / | %
Operator5 == + | -

Expr == Expr0
Expr0 == Expr1 | Expr0 Operator0 Expr1
Expr1 == Expr2 | Expr1 Operator1 Expr2
Expr2 == Expr3 | Expr2 Operator2 Expr3
Expr3 == Expr4 | Expr3 Operator3 Expr4
Expr4 == Expr5 | Expr4 Operator4 Expr5
Expr5 == PrimeExpr | Expr5 Operator5 PrimeExpr

PrimeExpr == epsilon
           | Value
           | NameIdent
           | VardefExpr
           | AssignExpr
           | FuncExpr
           | ForExpr
           | WhileExpr
           | IfExpr
           | BreakExpr
           | ContinueExpr
           | ReturnExpr
           | StructExpr
           | ( Expr )
           | { ExprBlock }
           | FieldExpr
           | IndexingExpr
           | VardefAssignExpr

FieldExpr == Expr . NameIdent
IndexingExpr == Expr [ Expr ]
StructExpr == struct { } | struct { ( TypeIdent NameIdent ,)* TypeIdent NameIdent }

FuncExpr == TypeIdent ( ) { ExprBlock }
          | TypeIdent ( (TypeIdent NameIdent ,)* TypeIdent NameIdent ) { ExprBlock }

FuncVal == NameIdent ( ) | NameIdent ( (Expr ,)* Expr )

VardefExpr == TypeIdent Spc NameIdent
VardefAssignExpr == TypeIdent Spc NameIdent = Expr
AssignExpr == Expr = Expr

ExprBlock == ( Expr ; )* Expr

ForExpr == for ( Expr ; Expr ; Expr ) { ExprBlock }
WhileExpr == while ( Expr ) { ExprBlock }

IfExpr == if ( Expr ) Expr
        | if ( Expr ) { ExprBlock }
        | if ( Expr ) Expr else Expr
        | if ( Expr ) { ExprBlock } else { ExprBlock }

BreakExpr == break
ContinueExpr == continue
ReturnExpr == return Spc Expr

CommentExpr == // (sigma/Newline)*
